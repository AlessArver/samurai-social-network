{"version":3,"sources":["serviceWorker.js","components/Header/Header.tsx","containers/HeaderContainer.tsx","components/Nav/Nav.tsx","redux/actions/app.ts","redux/reducers/appReducer.ts","redux/reducers/dialogsReducer.ts","redux/index.ts","App.tsx","index.tsx","redux/actions/auth.ts","api/auth.ts","api/security.ts","redux/reducers/authReducer.ts","components/Nav/Nav.module.css","redux/actions/profile.ts","components/common/Preloader/Preloder.tsx","api/index.ts","redux/actions/user.ts","api/user.ts","redux/reducers/usersReducer.ts","api/profile.ts","redux/reducers/profileReducer.ts","components/Header/Header.module.css","assets/images/preloader.svg"],"names":["Boolean","window","location","hostname","match","Header","isAuth","logout","className","s","header","to","onClick","connect","state","auth","login","props","Nav","activeClassName","active","appActions","type","initialState","initialized","appReducer","action","dialogs","id","name","messages","text","rootReducer","combineReducers","app","profilePage","profileReducer","dialogsPage","filter","m","usersPage","usersReducer","authReducer","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","_store","DialogsContainer","lazy","ProfileContainer","UsersContainer","Login","App","this","initializeApp","fallback","exact","path","render","Component","AppContainer","dispatch","getAuthUser","then","withRouter","MainApp","StrictMode","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","authActions","email","url","authApi","instance","get","res","data","password","rememberMe","captcha","post","delete","securityApi","a","resultCode","ResultCodes","Success","ResultCodeWithCaptcha","CaptchaIsRequired","getCaptchaUrl","length","stopSubmit","_error","module","exports","profileActions","setProfile","profile","addPost","deletePost","saveAvatarSuccess","photos","setStatus","status","Preloader","src","preloder","alt","axios","create","baseURL","withCredentials","headers","userActions","currentPage","totalUsersCount","users","isFetching","followingInProgress","userApi","getUsers","pageSize","follow","unfollow","requestUsers","map","u","followed","page","items","totalCount","followUnfollowFlow","apiMethod","bind","profileApi","put","file","formData","FormData","append","posts","likesCount","getProfile","p","getStatus","updateStatus","alert","saveAvatar","saveProfile","getState","Error","Promise","reject"],"mappings":"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","file":"static/js/main.f193746b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport * as H from '../../types/header'\r\n\r\nconst Header: FC<H.HeaderStoreProps> = ({isAuth, logout}) => (\r\n  <header className={s.header}>\r\n    <NavLink to='/'>Logo</NavLink>\r\n    {isAuth\r\n      ? <NavLink to='/logout'>\r\n        <button onClick={logout}>Logout</button>\r\n      </NavLink>\r\n      : <NavLink to='/login'>Login</NavLink>\r\n    }\r\n  </header>\r\n)\r\nexport default Header","import React, { FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { logout } from '../redux/reducers/authReducer'\r\nimport Header from '../components/Header/Header'\r\nimport { AppStateType } from '../redux'\r\nimport * as H from '../types/header'\r\n\r\nconst HeaderContainer: FC<H.HeaderStoreProps> = props => <Header {...props} />\r\n\r\nconst mapStateToProps = (state: AppStateType): H.HeaderMapStateToProps => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './Nav.module.css'\r\n\r\nconst Nav = () => (\r\n  <nav>\r\n    <div>\r\n      <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\r\n    </div>\r\n    <div>\r\n      <NavLink to='/dialogs' activeClassName={s.active}>Dialogs</NavLink>\r\n    </div>\r\n    <div>\r\n      <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\r\n    </div>\r\n    <div>\r\n      <NavLink to='/news' activeClassName={s.active}>News</NavLink>\r\n    </div>\r\n    <div>\r\n      <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\r\n    </div>\r\n  </nav>\r\n)\r\nexport default Nav","export const appActions = {\r\n  initializedSuccess: () => ({ type: 'SN/APP/INITIALIZED_SUCCESS' })\r\n}","import { getAuthUser } from './authReducer'\r\nimport { appActions } from '../actions/app'\r\nimport { InferActionsTypes, ThunkType } from '../index'\r\n\r\nconst initialState = {\r\n  initialized: false\r\n}\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof appActions>\r\ntype T = ThunkType<ActionsType>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/APP/INITIALIZED_SUCCESS':\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport default appReducer\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n  dispatch(getAuthUser())\r\n    .then(() => dispatch(appActions.initializedSuccess()))\r\n}","import { DialogType, MessageType } from '../../types/types'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType, InferActionsTypes, ThunkType } from '../index'\r\nimport { dialogActions } from '../actions/dialog'\r\n\r\nconst initialState = {\r\n  dialogs: [\r\n    {id: 1, name: 'Mark'},\r\n    {id: 2, name: 'Alice'}\r\n  ] as Array<DialogType>,\r\n  messages: [\r\n    {id: 1, text: 'Hi'},\r\n    {id: 2, text: 'How are you?'}\r\n  ] as Array<MessageType>\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof dialogActions>\r\ntype T = ThunkType<ActionsType>\r\n\r\nexport default (state = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/DIALOGS/ADD_MESSAGE':\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          {id: 3, text: action.text}\r\n        ]\r\n      }\r\n    case 'SN/DIALOGS/DELETE_MESSAGE':\r\n      return {\r\n        ...state,\r\n        messages: state.messages.filter(m => m.id !== action.id)\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { Action, applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport profileReducer from './reducers/profileReducer'\r\nimport dialogsReducer from './reducers/dialogsReducer'\r\nimport usersReducer from './reducers/usersReducer'\r\nimport authReducer from './reducers/authReducer'\r\nimport thunk, { ThunkAction } from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from './reducers/appReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  app: appReducer,\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer\r\n})\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type ThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n// @ts-ignore\r\nwindow._store = store\r\n\r\nexport default store","import React, { Suspense, lazy, Component, FC, ComponentType } from 'react'\nimport { BrowserRouter, Redirect, Route, Switch, withRouter } from 'react-router-dom'\nimport './App.css'\nimport HeaderContainer from './containers/HeaderContainer'\nimport Nav from './components/Nav/Nav'\nimport { connect, Provider } from 'react-redux'\nimport { compose } from 'redux'\nimport { initializeApp } from './redux/reducers/appReducer'\nimport Preloader from './components/common/Preloader/Preloder'\nimport store, { AppStateType } from './redux'\nimport * as A from './types/app'\n\n//const FunComponent = (lazy(() => (import('./FunComponent'))))\nconst DialogsContainer = lazy(() => import('./containers/DialogsContainer'))\nconst ProfileContainer = lazy(() => import('./containers/ProfileContainer'))\nconst UsersContainer = lazy(() => import('./containers/UsersContainer'))\nconst Login = lazy(() => import('./components/Login/Login'))\n\nclass App extends Component<A.AppStoreProps> {\n  componentDidMount() {\n    this.props.initializeApp()\n  }\n\n  render() {\n    if (this.props.initialized)\n      return (\n        <div className='app-wrapper'>\n          <HeaderContainer/>\n          <Nav/>\n          <div className='app-wrapper-content'>\n            <Suspense fallback={<Preloader/>}>\n              <Switch>\n                <Route exact path='/' render={() => <Redirect to='/profile'/>}/>\n                <Route path='/profile/:id?' render={() => <ProfileContainer/>}/>\n                <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                <Route path='/users' render={() => <UsersContainer/>}/>\n                <Route path='/login' render={() => <Login/>}/>\n                <Route path='*' render={() => <div>404 Not Found</div>}/>\n              </Switch>\n            </Suspense>\n          </div>\n        </div>\n      )\n    else return <Preloader/>\n  }\n}\n\nconst mapStateToProps = (state: AppStateType): A.AppMapStateToProps =>\n  ({initialized: state.app.initialized})\n\nconst AppContainer = compose<ComponentType>(\n  connect(mapStateToProps, {initializeApp}),\n  withRouter)(App)\n\nconst MainApp: FC = () => (\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <AppContainer/>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>\n)\nexport default MainApp","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport MainApp from './App'\n\nReactDOM.render(<MainApp/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()","export const authActions = {\r\n  setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n    type: 'SN/APP/SET_USER_DATA',\r\n    id, email, login, isAuth\r\n  } as const),\r\n  getCaptchaUrlSuccess: (url: string) => ({type: 'SN/APP/SET_CAPTCHA_URL_SUCCESS', url} as const)\r\n}","import { instance, ResponseAPI, ResultCodes, ResultCodeWithCaptcha } from './index'\r\n\r\ntype AuthMeData = {\r\n  id: number,\r\n  email: string,\r\n  login: string\r\n}\r\ntype AuthLogin = {\r\n  userId: number\r\n}\r\n\r\nexport const authApi = {\r\n  me() {\r\n    return instance\r\n      .get<ResponseAPI<AuthMeData>>(`auth/me`)\r\n      .then(res => res.data)\r\n  },\r\n  login(email: string, password: string, rememberMe = false, captcha: string | null = null) {\r\n    return instance\r\n      .post<ResponseAPI<AuthLogin, ResultCodes | ResultCodeWithCaptcha>>\r\n      ('auth/login', {\r\n        email,\r\n        password,\r\n        rememberMe,\r\n        captcha\r\n      })\r\n      .then(res => res.data)\r\n  },\r\n  logout() {\r\n    return instance.delete('auth/login')\r\n  }\r\n}","import { instance } from './index'\r\n\r\ntype SecurityAPI = {\r\n  url: string\r\n}\r\n\r\nexport const securityApi = {\r\n  getCaptchaUrl() {\r\n    return instance\r\n      .get<SecurityAPI>(`security/get-captcha-url`)\r\n      .then(res => res.data)\r\n  }\r\n}","import { FormAction, stopSubmit } from 'redux-form'\r\nimport { InferActionsTypes, ThunkType } from '../index'\r\nimport { authActions } from '../actions/auth'\r\nimport { authApi } from '../../api/auth'\r\nimport { securityApi } from '../../api/security'\r\nimport { ResultCodes, ResultCodeWithCaptcha } from '../../api'\r\n\r\ntype initialStateType = {\r\n  id: number | null,\r\n  email: string | null,\r\n  login: string | null,\r\n  isAuth: boolean,\r\n  captcha: string | null\r\n}\r\nconst initialState: initialStateType = {\r\n  id: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n  captcha: null\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof authActions>\r\ntype T = ThunkType<ActionsType | FormAction>\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/APP/SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        id: action.id,\r\n        email: action.email,\r\n        login: action.login,\r\n        isAuth: action.isAuth\r\n      }\r\n    case 'SN/APP/SET_CAPTCHA_URL_SUCCESS':\r\n      return {\r\n        ...state,\r\n        captcha: action.url\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport default authReducer\r\n\r\nexport const getAuthUser = (): T => async (dispatch) => {\r\n  const data = await authApi.me()\r\n  if (data.resultCode === ResultCodes.Success) {\r\n    let {id, email, login} = data.data\r\n    dispatch(authActions.setAuthUserData(id, email, login, true))\r\n  }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): T => async (dispatch) => {\r\n  const data = await authApi.login(email, password, rememberMe, captcha)\r\n  if (data.resultCode === ResultCodes.Success)\r\n    await dispatch(getAuthUser())\r\n  else {\r\n    if (data.resultCode === ResultCodeWithCaptcha.CaptchaIsRequired)\r\n      await dispatch(getCaptchaUrl())\r\n    let message = data.messages.length > 0 ? data.messages[0] : 'Some error'\r\n    dispatch(stopSubmit('login', {_error: message}))\r\n  }\r\n}\r\nexport const getCaptchaUrl = (): T => async (dispatch) => {\r\n  const data = await securityApi.getCaptchaUrl()\r\n  const captcha = data.url\r\n  dispatch(authActions.getCaptchaUrlSuccess(captcha))\r\n}\r\nexport const logout = (): T => async (dispatch) => {\r\n  const data: any = await authApi.logout()\r\n  if (data.resultCode === ResultCodes.Success)\r\n    dispatch(authActions.setAuthUserData(\r\n      null,\r\n      null,\r\n      null,\r\n      false\r\n    ))\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Nav_active__1-Ghp\"};","import { PhotosType, ProfileType } from '../../types/types'\r\n\r\nexport const profileActions = {\r\n  setProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_PROFILE', profile} as const),\r\n  addPost: (text: string) => ({type: 'SN/PROFILE/ADD_POST', text} as const),\r\n  deletePost: (id: number) => ({type: 'SN/PROFILE/DELETE_POST', id} as const),\r\n  saveAvatarSuccess: (photos: PhotosType) => ({type: 'SN/APP/SAVE_AVATAR_SUCCESS', photos} as const),\r\n  setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const)\r\n}","import React from 'react'\r\nimport preloder from '../../../assets/images/preloader.svg'\r\n\r\nconst Preloader = () => <img src={preloder} alt=\"preloder\"/>\r\nexport default Preloader","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'a9b36abe-d689-4dc1-9b92-adeaba26d689'\r\n  }\r\n})\r\n\r\nexport enum ResultCodes {\r\n  Success = 0,\r\n  Error = 1\r\n}\r\nexport enum ResultCodeWithCaptcha {\r\n  CaptchaIsRequired = 10\r\n}\r\n\r\nexport type ResponseAPI<D = {}, RC = ResultCodes> = {\r\n  data: D\r\n  resultCode: RC\r\n  messages: Array<string>\r\n}","// @ts-ignore\r\nimport { UserType } from '../../types/types'\r\n\r\nexport const userActions = {\r\n  setCurrentPage: (currentPage: number) => ({type: 'SN/USER/SET_CURRENT_PAGE', currentPage} as const),\r\n  setTotalUsersCount: (totalUsersCount: number) => ({type: 'SN/APP/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n  setUsers: (users: Array<UserType>) => ({type: 'SN/USER/SET_USERS', users} as const),\r\n  toggleIsFollowSuccess: (id: number) => ({type: 'SN/USER/TOGGLE_IS_FOLLOW', id} as const),\r\n  toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USER/TOGGLE_IS_FETCHING', isFetching} as const),\r\n  toggleIsFollowingInProgress: (followingInProgress: boolean, id: number) => ({\r\n    type: 'SN/USER/TOGGLE_IS_FOLLOWING_IN_PROGRESS',\r\n    followingInProgress, id\r\n  } as const)\r\n}","import { instance, ResponseAPI } from './index'\r\nimport { UserType } from '../types/types'\r\n\r\ntype UsersGet = {\r\n  items: Array<UserType>\r\n  totalCount: number\r\n  error: string\r\n}\r\n\r\nexport const userApi = {\r\n  getUsers(currentPage: number, pageSize: number) {\r\n    return instance\r\n      .get<UsersGet>(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then(res => res.data)\r\n  },\r\n  follow(id: number) {\r\n    return instance\r\n      .post<ResponseAPI>(`follow/${id}`)\r\n      .then(res => res.data)\r\n  },\r\n  unfollow(id: number) {\r\n    return instance\r\n      .delete(`unfollow/${id}`)\r\n      .then(res => res.data) as Promise<Response>\r\n  }\r\n}","import { UserType } from '../../types/types'\r\nimport { Dispatch } from 'redux'\r\nimport {  InferActionsTypes, ThunkType } from '../index'\r\nimport { userActions } from '../actions/user'\r\nimport { userApi } from '../../api/user'\r\nimport { ResultCodes } from '../../api'\r\n\r\ntype ActionsType = InferActionsTypes<typeof userActions>\r\ntype T = ThunkType<ActionsType>\r\n\r\nconst initialState = {\r\n  users: [] as Array<UserType>,\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as Array<number>\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/USER/SET_CURRENT_PAGE':\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage\r\n      }\r\n    case 'SN/APP/SET_TOTAL_USERS_COUNT':\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsersCount\r\n      }\r\n    case 'SN/USER/SET_USERS':\r\n      return {...state, users: action.users}\r\n    case 'SN/USER/TOGGLE_IS_FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.id)\r\n            return {...u, followed: !u.followed}\r\n          return u\r\n        })\r\n      }\r\n    case 'SN/USER/TOGGLE_IS_FETCHING':\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching\r\n      }\r\n    case 'SN/USER/TOGGLE_IS_FOLLOWING_IN_PROGRESS':\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.followingInProgress\r\n          ? [...state.followingInProgress, action.id]\r\n          : state.followingInProgress.filter(id => id !== action.id)\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport default usersReducer\r\n\r\nexport const requestUsers = (page: number, pageSize: number): T => async (dispatch) => {\r\n  dispatch(userActions.toggleIsFetching(true))\r\n  dispatch(userActions.setCurrentPage(page))\r\n  const data = await userApi.getUsers(page, pageSize)\r\n  dispatch(userActions.toggleIsFetching(false))\r\n  dispatch(userActions.setUsers(data.items))\r\n  dispatch(userActions.setTotalUsersCount(data.totalCount))\r\n}\r\nconst followUnfollowFlow = async (dispatch: Dispatch, id: number, apiMethod: any) => {\r\n  dispatch(userActions.toggleIsFollowingInProgress(true, id))\r\n  const data = await apiMethod(id)\r\n  if (data.resultCode === ResultCodes.Success) dispatch(userActions.toggleIsFollowSuccess(id))\r\n  dispatch(userActions.toggleIsFollowingInProgress(false, id))\r\n}\r\nexport const follow = (id: number): T => (dispatch) =>\r\n  followUnfollowFlow(dispatch, id, userApi.follow.bind(userApi))\r\nexport const unfollow = (id: number): T => (dispatch) =>\r\n  followUnfollowFlow(dispatch, id, userApi.unfollow.bind(userApi))","import { ContactsType, PhotosType, ProfileType } from '../types/types'\r\nimport { instance, ResponseAPI, ResultCodes } from './index'\r\n\r\ninterface ProfileBaseAPI {\r\n  userId: number\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  fullName: string\r\n  contacts: ContactsType\r\n}\r\n\r\ninterface ProfileGetAPI extends ProfileBaseAPI {\r\n  photos: PhotosType\r\n}\r\n\r\ninterface ProfileUpdateAPI extends ProfileBaseAPI {\r\n  resultCode: ResultCodes\r\n  messages: Array<string>\r\n}\r\ntype ProfileSaveAvatar = {\r\n  photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n  getProfile(id: number) {\r\n    return instance\r\n      .get<ProfileGetAPI>(`profile/${id}`)\r\n      .then(res => res.data)\r\n  },\r\n  getStatus(id: number) {\r\n    return instance\r\n      .get<string>(`profile/status/${id}`)\r\n      .then(res => res.data)\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance\r\n      .put<ResponseAPI>(`profile/status`, {status})\r\n      .then(res => res.data)\r\n  },\r\n  saveAvatar(file: any) {\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    return instance\r\n      .put<ResponseAPI<ProfileSaveAvatar>>('profile/photo', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      })\r\n      .then(res => res.data)\r\n  },\r\n  saveProfile(profile: ProfileType) {\r\n    return instance\r\n      .put<ProfileUpdateAPI>(`profile`, profile)\r\n      .then(res => res.data)\r\n  }\r\n}","import { FormAction, stopSubmit } from 'redux-form'\r\nimport { PostType, ProfileType } from '../../types/types'\r\nimport { InferActionsTypes, ThunkType } from '../index'\r\nimport { profileActions } from '../actions/profile'\r\nimport { profileApi } from '../../api/profile'\r\nimport { ResultCodes } from '../../api'\r\n\r\nconst initialState = {\r\n  posts: [\r\n    {\r\n      id: 1,\r\n      text: 'My first post',\r\n      likesCount: 100\r\n    },\r\n    {\r\n      id: 2,\r\n      text: 'My second post',\r\n      likesCount: 45634\r\n    }\r\n  ] as Array<PostType>,\r\n  profile: null as null | ProfileType,\r\n  status: ''\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof profileActions>\r\ntype T = ThunkType<ActionsType | FormAction>\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/PROFILE/SET_PROFILE':\r\n      return {...state, profile: action.profile}\r\n    case 'SN/PROFILE/ADD_POST':\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts,\r\n          {id: 3, text: action.text, likesCount: 0}\r\n        ]\r\n      }\r\n    case 'SN/PROFILE/DELETE_POST':\r\n      return {...state, posts: state.posts.filter(p => p.id !== action.id)}\r\n    case 'SN/APP/SAVE_AVATAR_SUCCESS':\r\n      return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n    case 'SN/PROFILE/SET_STATUS':\r\n      return {...state, status: action.status}\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport default profileReducer\r\n\r\nexport const getProfile = (id: number): T => async dispatch => {\r\n  const data = await profileApi.getProfile(id)\r\n  dispatch(profileActions.setProfile(data))\r\n}\r\nexport const getStatus = (id: number): T => async dispatch => {\r\n  const data = await profileApi.getStatus(id)\r\n  dispatch(profileActions.setStatus(data))\r\n}\r\nexport const updateStatus = (status: string): T => async dispatch => {\r\n  try {\r\n    const data = await profileApi.updateStatus(status)\r\n    if (data.resultCode === ResultCodes.Success) dispatch(profileActions.setStatus(status))\r\n  } catch (e) {\r\n    alert('ERROR')\r\n  }\r\n}\r\nexport const saveAvatar = (file: File): T => async dispatch => {\r\n  const data = await profileApi.saveAvatar(file)\r\n  if (data.resultCode === ResultCodes.Success)\r\n    dispatch(profileActions.saveAvatarSuccess(data.data.photos))\r\n}\r\nexport const saveProfile = (profile: ProfileType): T => async (dispatch, getState) => {\r\n  const id = getState().auth.id\r\n  const data = await profileApi.saveProfile(profile)\r\n  if (data.resultCode === ResultCodes.Success)\r\n    if (id) await dispatch(getProfile(id))\r\n    else throw new Error('userId can\\'t be null')\r\n  else {\r\n    let message = data.messages.length ? data.messages[0] : 'Some error'\r\n    dispatch(stopSubmit('profileDataForm', {_error: message}))\r\n    return Promise.reject(message)\r\n  }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__cf_lA\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.65cb35c3.svg\";"],"sourceRoot":""}