{"version":3,"sources":["serviceWorker.js","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Nav/Nav.jsx","redux/appReducer.js","redux/index.js","App.js","index.js","redux/authReducer.js","components/Nav/Nav.module.css","components/common/Preloader/Preloder.jsx","redux/profileReducer.js","redux/dialogsReducer.js","redux/usersReducer.js","components/Header/Header.module.css","assets/images/preloader.svg","api/api.js"],"names":["Boolean","window","location","hostname","match","Header","props","className","s","href","isAuth","to","onClick","logout","connect","state","auth","login","Nav","activeClassName","initialState","initialized","appReducer","action","type","reducers","combineReducers","app","profilePage","profileReducer","dialogsPage","dialogsReducer","usersPage","usersReducer","authReducer","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","_store","DialogsContainer","lazy","ProfileContainer","UsersContainer","Login","AppContainer","initializeApp","dispatch","getAuthUser","then","withRouter","useEffect","fallback","path","render","MainApp","StrictMode","basename","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","SET_USER_DATA","id","email","isFetching","data","setAuthUserData","a","authApi","me","resultCode","password","rememberMe","messages","length","stopSubmit","_error","module","exports","Preloader","src","preloder","alt","posts","text","likesCount","profile","status","filter","p","addPost","setStatus","getProfile","userApi","getUser","getStatus","profileApi","updateStatus","dialogs","name","m","addMessage","users","pageSize","totalUsersCount","currentPage","followingInProgress","map","u","followed","setCurrentPage","toggleIsFollowSuccess","toggleIsFetching","toggleIsFollowingInProgress","requestUsers","page","getUsers","items","totalCount","followUnfollowFlow","apiMethod","follow","bind","unfollow","instance","axios","create","baseURL","withCredentials","headers","get","res","warn","post","delete","put"],"mappings":"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","file":"static/js/main.00d7be86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport * as s from \"./Header.module.css\"\r\n\r\nconst Header = props => (\r\n    <header className={s.header}>\r\n        <a href=\"#\">Logo</a>\r\n        {props.isAuth\r\n            ? <NavLink to=\"/logout\">\r\n                <button onClick={props.logout}>Logout</button>\r\n            </NavLink>\r\n            : <NavLink to=\"/login\">Login</NavLink>\r\n        }\r\n    </header>\r\n)\r\nexport default Header","import React from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport Header from \"./Header\";\r\n\r\nconst HeaderContainer = props => <Header {...props} />\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React from \"react\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport * as s from \"./Nav.module.css\"\r\n\r\nconst Nav = () => (\r\n    <nav>\r\n        <div>\r\n            <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.active}>Dialogs</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n        </div>\r\n    </nav>\r\n)\r\nexport default Nav","import {getAuthUser} from \"./authReducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED-SUCCESS\"\r\n\r\nconst initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default appReducer\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS})\r\n\r\nexport const initializeApp = () => dispatch => {\r\n    dispatch(getAuthUser())\r\n        .then(() => dispatch(initializedSuccess()))\r\n}","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport profileReducer from './profileReducer';\r\nimport dialogsReducer from './dialogsReducer';\r\nimport usersReducer from './usersReducer';\r\nimport authReducer from './authReducer';\r\nimport thunk from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from './appReducer';\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)))\r\nwindow._store = store\r\n\r\nexport default store","import React, {useEffect, Suspense, lazy} from 'react'\nimport {BrowserRouter, Route, withRouter} from 'react-router-dom'\nimport './App.css'\nimport HeaderContainer from './components/Header/HeaderContainer'\nimport Nav from './components/Nav/Nav'\nimport {connect, Provider} from 'react-redux'\nimport {compose} from 'redux'\nimport {initializeApp} from './redux/appReducer'\nimport Preloader from './components/common/Preloader/Preloder'\nimport store from './redux'\n\nconst DialogsContainer = lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = lazy(() => import('./components/Profile/ProfileContainer'))\nconst UsersContainer = lazy(() => import('./components/Users/UsersContainer'))\nconst Login = lazy(() => import('./components/Login/Login'))\n\nconst App = props => {\n    useEffect(() => props.initializeApp(), [props.initialized])\n\n    if (props.initialized)\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Nav/>\n                <div className='app-wrapper-content'>\n                    <Suspense fallback={<Preloader/>}>\n                        <Route path='/profile/:id?' render={() => <ProfileContainer/>}/>\n                        <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                        <Route path='/users' render={() => <UsersContainer/>}/>\n                        <Route path='/login' render={() => <Login/>}/>\n                    </Suspense>\n\n                </div>\n            </div>\n        )\n    else return <Preloader/>\n}\n\nconst mapStateToProps = state => ({initialized: state.app.initialized})\n\nconst AppContainer = compose(\n    connect(mapStateToProps, {initializeApp}),\n    withRouter\n)(App)\n\nconst MainApp = () => (\n    <React.StrictMode>\n        <BrowserRouter basename='/samurai-social-network'>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>\n)\nexport default MainApp","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport MainApp from './App'\n\nReactDOM.render(<MainApp/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()","import {authApi} from '../api/api';\r\nimport {stopSubmit} from 'redux-form';\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET-USER-DATA'\r\n\r\nconst initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default authReducer\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    data: {id, email, login, isAuth}\r\n})\r\n\r\nexport const getAuthUser = () => async dispatch => {\r\n    const data = await authApi.me()\r\n    if (data.resultCode === 0) {\r\n        let {id, email, login} = data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email, password, rememberMe) => async dispatch => {\r\n    const data = await authApi.login(email, password, rememberMe)\r\n    if (data.resultCode === 0) dispatch(getAuthUser())\r\n    else {\r\n        let message = data.messages.length > 0 ? data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', {_error: message}))\r\n    }\r\n}\r\nexport const logout = () => async dispatch => {\r\n    const data = await authApi.logout()\r\n    if (data.resultCode === 0)\r\n        dispatch(setAuthUserData(\r\n            null,\r\n            null,\r\n            null,\r\n            false\r\n        ))\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Nav_active__1-Ghp\"};","import React from \"react\";\r\nimport preloder from \"../../../assets/images/preloader.svg\";\r\n\r\nconst Preloader = () => <img src={preloder} alt=\"preloder\"/>\r\nexport default Preloader","import {profileApi, userApi} from '../api/api';\r\n\r\nconst SET_PROFILE = 'SET-PROFILE'\r\nconst ADD_POST = 'ADD-POST'\r\nconst DELETE_POST = 'DELETE-POST'\r\nconst SET_STATUS = 'SET-STATUS'\r\nconst UPDATE_NEW_STATUS_TEXT = 'UPDATE-NEW-STATUS-TEXT'\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            text: 'My first post',\r\n            likesCount: 100\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'My second post',\r\n            likesCount: 45634\r\n        }\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    ...state.posts,\r\n                    {\r\n                        id: 3,\r\n                        text: action.text,\r\n                        likesCount: 0\r\n                    }\r\n                ]\r\n            }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.id)\r\n            }\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default profileReducer\r\n\r\nexport const setProfile = profile => ({type: SET_PROFILE, profile})\r\nexport let addPost = text => ({type: ADD_POST, text})\r\nexport let deletePost = id => ({type: DELETE_POST, id})\r\n\r\nexport const setStatus = status => ({type: SET_STATUS, status})\r\n\r\nexport const getProfile = id => async dispatch => {\r\n    const data = await userApi.getUser(id)\r\n    dispatch(setProfile(data))\r\n}\r\nexport const getStatus = id => async dispatch => {\r\n    const data = await profileApi.getStatus(id)\r\n    dispatch(setStatus(data))\r\n}\r\nexport const updateStatus = status => async dispatch => {\r\n    const data = await profileApi.updateStatus(status)\r\n    if (!data.resultCode) dispatch(setStatus(status))\r\n}\r\n","const ADD_MESSAGE = 'ADD-MESSAGE'\r\nconst DELETE_MESSAGE = 'DELETE-MESSAGE'\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Mark'},\r\n        {id: 2, name: 'Alice'}\r\n    ],\r\n    messages: [\r\n        {id: 1, text: 'Hi'},\r\n        {id: 2, text: 'How are you?'}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [\r\n                    ...state.messages,\r\n                    {id: 3, text: action.text}\r\n                ]\r\n            }\r\n        case DELETE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: state.messages.filter(m => m.id !== action.id)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default dialogsReducer\r\n\r\nexport const addMessage = text => ({type: ADD_MESSAGE, text})\r\nexport const deleteMessage = id => ({type: DELETE_MESSAGE, id})","import {userApi} from '../api/api';\r\n\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT'\r\nconst SET_USERS = 'SET-USERS'\r\nconst TOGGLE_IS_FOLLOW = 'TOGGLE-IS-FOLLOW'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_IN_PROGRESS = 'TOGGLE-IS-FOLLOWING-IN-PROGRESS'\r\n\r\nconst initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case TOGGLE_IS_FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id)\r\n                        return {...u, followed: !u.followed}\r\n                    return u\r\n                })\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.followingInProgress\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default usersReducer\r\n\r\nexport const setCurrentPage = currentPage => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = totalUsersCount => ({\r\n    type: SET_TOTAL_USERS_COUNT, totalUsersCount\r\n})\r\nexport const setUsers = users => ({type: SET_USERS, users})\r\nexport const toggleIsFollowSuccess = id => ({type: TOGGLE_IS_FOLLOW, id})\r\nexport const toggleIsFetching = isFetching => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleIsFollowingInProgress = (followingInProgress, id) => ({\r\n    type: TOGGLE_IS_FOLLOWING_IN_PROGRESS,\r\n    followingInProgress, id\r\n})\r\n\r\nexport const requestUsers = (page, pageSize) => async dispatch => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    const data = await userApi.getUsers(page, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\nconst followUnfollowFlow = async (dispatch, id, apiMethod) => {\r\n    dispatch(toggleIsFollowingInProgress(true, id))\r\n    const data = await apiMethod(id)\r\n    if (data.resultCode === 0) dispatch(toggleIsFollowSuccess(id))\r\n    dispatch(toggleIsFollowingInProgress(false, id))\r\n}\r\nexport const follow = id => dispatch =>\r\n    followUnfollowFlow(dispatch, id, userApi.follow.bind(userApi))\r\nexport const unfollow = id => dispatch =>\r\n    followUnfollowFlow(dispatch, id, userApi.unfollow.bind(userApi))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__cf_lA\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.65cb35c3.svg\";","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"a9b36abe-d689-4dc1-9b92-adeaba26d689\"\r\n    }\r\n})\r\n\r\nexport const userApi = {\r\n    getUsers(currentPage, pageSize) {\r\n        return instance\r\n            .get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => res.data)\r\n    },\r\n    getUser(id) {\r\n        console.warn(\"Please use profileApi\")\r\n        return profileApi.getProfile(id)\r\n    },\r\n    follow(id) {\r\n        return instance\r\n            .post(`follow/${id}`)\r\n            .then(res => res.data)\r\n    },\r\n    unfollow(id) {\r\n        return instance\r\n            .delete(`unfollow/${id}`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(id) {\r\n        return instance\r\n            .get(`profile/${id}`)\r\n            .then(res => res.data)\r\n    },\r\n    getStatus(id) {\r\n        return instance\r\n            .get(`profile/status/${id}`)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status) {\r\n        return instance\r\n            .put(`profile/status`, {status})\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    me() {\r\n        return instance\r\n            .get(`auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n    login(email, password, rememberMe = false) {\r\n        return instance\r\n            .post(\"auth/login\", {\r\n                email,\r\n                password,\r\n                rememberMe\r\n            })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(\"auth/login\")\r\n    }\r\n}"],"sourceRoot":""}