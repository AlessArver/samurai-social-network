{"version":3,"sources":["components/common/Forms/Forms.tsx","utils/validators.ts","hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/MessageAddForm.tsx","components/Dialogs/Dialogs.tsx","containers/DialogsContainer.tsx","redux/actions/dialog.ts"],"names":["Form","input","meta","touched","error","el","props","showError","React","createElement","Textarea","Input","createField","name","placeholder","validators","component","text","validate","required","value","undefined","maxLength","max","length","minLength","min","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","restProps","to","module","exports","Dialog","id","className","s","dialog","activeClassName","active","src","Message","messageWrapper","message","reduxForm","form","handleSubmit","onSubmit","Dialogs","dialogs","map","d","key","messages","m","dialogsItems","messagesWrapper","data","addMessage","compose","dialogsPage","type"],"mappings":"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","file":"static/js/5.730c2734.chunk.js","sourcesContent":["import React, { FC, ReactNode } from 'react'\r\nimport * as s from './forms.module.css'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport cn from 'classnames'\r\nimport { ValidatorType } from '../../../utils/validators'\r\n\r\ntype FormType = {\r\n  el: string\r\n}\r\n\r\nconst Form: FC<WrappedFieldProps & FormType> = ({input, meta: {touched, error}, el, ...props}) => {\r\n  const showError = touched && error\r\n  //  className={cn(s.form, {[s.error]: showError})}\r\n  return (\r\n    <div>\r\n      {React.createElement(el, {...input, ...props})}\r\n      {showError && <small>{error}</small>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = props => <Form {...props} el='textarea'/>\r\nexport const Input: FC<WrappedFieldProps> = props => <Form {...props} el='input'/>\r\n\r\nexport const createField = <KeysType extends string>(name: KeysType,\r\n                                        placeholder: string | undefined,\r\n                                        validators: Array<ValidatorType>,\r\n                                        component: React.FC<WrappedFieldProps>,\r\n                                        props = {}, text = '') =>\r\n  <>\r\n    <Field\r\n      name={name}\r\n      placeholder={placeholder}\r\n      validate={validators}\r\n      component={component}\r\n      {...props}\r\n    /> {text}\r\n  </>","export type ValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: ValidatorType = value => value ? undefined : 'Field is required'\r\n\r\nexport const maxLength = (max: number): ValidatorType => (value) =>\r\n  value && value.length > max ? `Max characters: ${max}` : undefined\r\n\r\nexport const minLength = (min: number): ValidatorType => (value) =>\r\n  value && value.length < min ? `Min characters: ${min}` : undefined","import { Redirect } from 'react-router-dom'\r\nimport React, { ComponentType, FC } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../redux'\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n  isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = <WCP, >(Component: ComponentType<WCP>) => {\r\n  const RedirectComponent: FC<MapStateToPropsForRedirectType & {}> = (props) => {\r\n    let {isAuth, ...restProps} = props\r\n\r\n    if (!isAuth) return <Redirect to='/login'/>\r\n    return <Component {...restProps as WCP}/> || null\r\n  }\r\n\r\n  return connect<MapStateToPropsForRedirectType, {}, WCP, AppStateType>(\r\n    mapStateToPropsForRedirect)\r\n  (RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2gUxy\",\"dialogsItems\":\"Dialogs_dialogsItems__3g68G\",\"messages\":\"Dialogs_messages__1wxUZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2mO_T\",\"active\":\"Dialog_active__3i21K\",\"avatar-wrapper\":\"Dialog_avatar-wrapper__lWjxV\",\"text\":\"Dialog_text__1x27a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageWrapper\":\"Message_messageWrapper__2x62e\",\"message\":\"Message_message__3HPgv\",\"unreaded\":\"Message_unreaded__3fPvv\"};","import { NavLink } from 'react-router-dom'\r\nimport React, { FC } from 'react'\r\nimport s from './Dialog.module.css'\r\n\r\ntype DialogType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst Dialog: FC<DialogType> = ({id, name}) => {\r\n  return (\r\n    <NavLink to={`/dialogs/${id}`} className={s.dialog} activeClassName={s.active}>\r\n      <div className='avatar-wrapper'>\r\n        <img src='https://data.whicdn.com/images/331901362/original.jpg' className='avatar'/>\r\n      </div>\r\n      <div className={s.text}>{name}</div>\r\n    </NavLink>\r\n  )\r\n}\r\nexport default Dialog","import React, { FC } from 'react'\r\nimport s from './Message.module.css'\r\n\r\ntype MessageType = {\r\n  text: string\r\n}\r\n\r\nconst Message: FC<MessageType> = ({text}) => {\r\n  return (\r\n    <div className={s.messageWrapper}>\r\n      <div className={s.message}>{text}</div>\r\n    </div>\r\n  )\r\n}\r\nexport default Message","import { createField, Textarea } from '../common/Forms/Forms'\r\nimport { required } from '../../utils/validators'\r\nimport React, { FC } from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport * as D from '../../types/dialog'\r\n\r\nconst MessageAddForm: FC<InjectedFormProps<D.MessageFormType>> = ({handleSubmit}) => (\r\n  <form onSubmit={handleSubmit}>\r\n    {createField<D.MessageFormKeys>('message', 'Your minds', [required], Textarea)}\r\n    <button>Send</button>\r\n  </form>\r\n)\r\n\r\nexport default reduxForm<D.MessageFormType>({form: 'dialogs'})(MessageAddForm)","import React, { FC } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport s from './Dialogs.module.css'\r\nimport Dialog from './Dialog/Dialog'\r\nimport Message from './Message/Message'\r\nimport MessageAddReduxForm from './MessageAddForm'\r\nimport * as D from '../../types/dialog'\r\n\r\nconst Dialogs: FC<D.DialogsMapStateToProps & D.DialogsMapDispatchToProps> = props => {\r\n  const onSubmit = (data: D.MessageFormType) => {\r\n    props.addMessage(data.message)\r\n  }\r\n\r\n  let dialogs = props.dialogs.map(d => <Dialog id={d.id} name={d.name} key={d.id}/>)\r\n  let messages = props.messages.map(m => <Message text={m.text} key={m.id}/>)\r\n\r\n  if (!props.isAuth) return <Redirect to='/login'/>\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogs}</div>\r\n      <div className={s.messages}>\r\n        <div className={s.messagesWrapper}>{messages}</div>\r\n        <MessageAddReduxForm onSubmit={onSubmit}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Dialogs\r\n\r\n","import { connect } from 'react-redux'\r\nimport Dialogs from '../components/Dialogs/Dialogs'\r\nimport React, { ComponentType } from 'react'\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../redux'\r\nimport { dialogActions } from '../redux/actions/dialog'\r\nimport { DialogsMapStateToProps } from '../types/dialog'\r\n\r\nconst mapStateToProps = (state: AppStateType): DialogsMapStateToProps => ({\r\n  isAuth: state.auth.isAuth,\r\n  dialogs: state.dialogsPage.dialogs,\r\n  messages: state.dialogsPage.messages\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, {\r\n    addMessage: dialogActions.addMessage\r\n  }), withAuthRedirect)(Dialogs)","export const dialogActions = {\r\n  addMessage: (text: string) => ({type: 'SN/DIALOGS/ADD_MESSAGE', text} as const),\r\n  deleteMessage: (id: number) => ({type: 'SN/DIALOGS/DELETE_MESSAGE', id} as const)\r\n}"],"sourceRoot":""}