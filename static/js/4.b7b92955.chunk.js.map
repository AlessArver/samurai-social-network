{"version":3,"sources":["components/common/Forms/Forms.tsx","utils/validators.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/common/Forms/forms.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataFormm.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/AddPostForm/AddPostForm.tsx","components/Profile/Posts/Posts.tsx","containers/PostsContainer.tsx","components/Profile/Profile.tsx","containers/ProfileContainer.tsx"],"names":["Form","input","meta","touched","error","el","props","showError","React","createElement","Textarea","Input","createField","name","placeholder","validators","component","text","validate","required","value","undefined","maxLength","max","length","minLength","min","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","onDoubleClick","reduxForm","form","handleSubmit","profile","onSubmit","type","keys","contacts","map","c","key","className","s","formError","Contact","title","href","target","ProfileData","descriptionBlock","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","isOwner","saveProfile","saveAvatar","edit","setEdit","bigImageWrapper","src","photos","large","alt","small","smallImage","buttonsGroup","onClick","buttonGroupItem","files","initialValues","data","then","Post","likesCount","post","postText","buttons","maxLengthPost","memo","posts","p","id","reverse","addPost","connect","state","profilePage","profileActions","Posts","Profile","PostsContainer","ProfileContainer","this","match","params","isAuth","userId","history","getProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","withRouter"],"mappings":"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","file":"static/js/4.b7b92955.chunk.js","sourcesContent":["import React, { FC, ReactNode } from 'react'\r\nimport * as s from './forms.module.css'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport cn from 'classnames'\r\nimport { ValidatorType } from '../../../utils/validators'\r\n\r\ntype FormType = {\r\n  el: string\r\n}\r\n\r\nconst Form: FC<WrappedFieldProps & FormType> = ({input, meta: {touched, error}, el, ...props}) => {\r\n  const showError = touched && error\r\n  //  className={cn(s.form, {[s.error]: showError})}\r\n  return (\r\n    <div>\r\n      {React.createElement(el, {...input, ...props})}\r\n      {showError && <small>{error}</small>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = props => <Form {...props} el='textarea'/>\r\nexport const Input: FC<WrappedFieldProps> = props => <Form {...props} el='input'/>\r\n\r\nexport const createField = <KeysType extends string>(name: KeysType,\r\n                                        placeholder: string | undefined,\r\n                                        validators: Array<ValidatorType>,\r\n                                        component: React.FC<WrappedFieldProps>,\r\n                                        props = {}, text = '') =>\r\n  <>\r\n    <Field\r\n      name={name}\r\n      placeholder={placeholder}\r\n      validate={validators}\r\n      component={component}\r\n      {...props}\r\n    /> {text}\r\n  </>","export type ValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: ValidatorType = value => value ? undefined : 'Field is required'\r\n\r\nexport const maxLength = (max: number): ValidatorType => (value) =>\r\n  value && value.length > max ? `Max characters: ${max}` : undefined\r\n\r\nexport const minLength = (min: number): ValidatorType => (value) =>\r\n  value && value.length < min ? `Min characters: ${min}` : undefined","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"forms_form__tHqmU\",\"error\":\"forms_error__2xJFm\",\"formError\":\"forms_formError__3e95j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bigImageWrapper\":\"ProfileInfo_bigImageWrapper__3TAxq\",\"smallImage\":\"ProfileInfo_smallImage__3VggN\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2kh2A\",\"buttonsGroup\":\"ProfileInfo_buttonsGroup__mEHnD\",\"buttonGroupItem\":\"ProfileInfo_buttonGroupItem__1WWeG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPost\":\"Posts_newPost___GXBB\",\"posts\":\"Posts_posts__jtVvg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPost\":\"Post_newPost__mNv8s\",\"post\":\"Post_post__3Tosk\",\"avatarWrapper\":\"Post_avatarWrapper__MOuM1\",\"postText\":\"Post_postText__2iDx6\",\"buttons\":\"Post_buttons__2PX-B\"};","import React, { ChangeEvent, FC, useEffect, useState } from 'react'\r\nimport * as s from './ProfileStatus.module.css'\r\n\r\ntype PropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus: FC<PropsType> = (props) => {\r\n  let [editMode, setEditMode] = useState<boolean>(false)\r\n  let [status, setStatus] = useState<string>(props.status)\r\n\r\n\r\n  useEffect(() => setStatus(props.status), [props.status])\r\n\r\n  const activateEditMode = () => setEditMode(true)\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateStatus(status)\r\n  }\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n  return (\r\n    <>\r\n      Status:\r\n      {!editMode\r\n        ? <div>\r\n            <span onDoubleClick={activateEditMode}>\r\n               {props.status || 'No status'}\r\n            </span>\r\n        </div>\r\n        : <input\r\n          onChange={onStatusChange}\r\n          autoFocus={true}\r\n          onBlur={deactivateEditMode}\r\n          value={status}\r\n        />\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfileStatus","import React, { FC } from 'react'\r\nimport { createField, Input, Textarea } from '../../../common/Forms/Forms'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport s from '../../../common/Forms/forms.module.css'\r\nimport { GetStringKeys, ProfileType } from '../../../../types/types'\r\n\r\ntype ProfileDataFormType = {\r\n  profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormType> & ProfileDataFormType> = ({handleSubmit, profile, error}) => (\r\n  <form onSubmit={handleSubmit}>\r\n    <button>Save</button>\r\n    {createField<GetStringKeys<ProfileType>>('fullName', 'Full Name', [], Input)}\r\n    {createField<GetStringKeys<ProfileType>>(\r\n      'lookingForAJob',\r\n      undefined,\r\n      [],\r\n      Input,\r\n      {type: 'checkbox'},\r\n      'Looking for a job')}\r\n    {createField<GetStringKeys<ProfileType>>('aboutMe', 'About me', [], Textarea)}\r\n    {createField<GetStringKeys<ProfileType>>('lookingForAJobDescription', 'My professional skills', [], Textarea)}\r\n    <div>Contacts:</div>\r\n    {Object\r\n      .keys(profile.contacts)\r\n      .map(c => <div key={c}>{createField(`contacts.${c}`, c, [], Input)}</div>)}\r\n    {error && <div className={s.formError}>{error}</div>}\r\n  </form>\r\n)\r\n\r\nexport default reduxForm<ProfileType, ProfileDataFormType>({form: 'profileDataForm'})(ProfileDataForm)","import s from '../ProfileInfo.module.css'\r\nimport React, { FC } from 'react'\r\nimport { ContactsType, ProfileType } from '../../../../types/types'\r\n\r\ntype ContactType = {\r\n  title: string\r\n  value: string\r\n}\r\nconst Contact: FC<ContactType> = ({title, value}) => (\r\n  <li>\r\n    <a href={value} target='_blank'>{title}</a>\r\n  </li>\r\n)\r\n\r\ntype ProfileDataProps = {\r\n  profile: ProfileType\r\n}\r\nconst ProfileData: FC<ProfileDataProps> = profile => (\r\n  <div className={s.descriptionBlock}>\r\n    <ul>\r\n      {Object\r\n        .keys(profile.profile.contacts)\r\n        .map(c => <Contact title={c} value={profile.profile.contacts[c as keyof ContactsType]} key={c}/>)}\r\n    </ul>\r\n    <div>\r\n      <div>\r\n        <div>{profile.profile.fullName}</div>\r\n      </div>\r\n      <div>\r\n        <div>About me: {profile.profile.aboutMe || '-'}</div>\r\n      </div>\r\n      <div>\r\n        <div>Looking for a job: {profile.profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n      </div>\r\n      <div>\r\n        <div>My professional skills: {profile.profile.lookingForAJobDescription || '-'}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\nexport default ProfileData","import React, { ChangeEvent, FC, useState } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloder'\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus'\r\nimport ProfileDataForm from './ProfileDataForm/ProfileDataFormm'\r\nimport ProfileData from './ProfileData/ProfileData'\r\nimport { ProfileType } from '../../../types/types'\r\n\r\ntype Props = {\r\n  isOwner: boolean\r\n  profile: ProfileType | null\r\n  saveAvatar: (file: File) => void\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<Props> = ({\r\n                                  profile, isOwner, status,\r\n                                  updateStatus, saveProfile, saveAvatar\r\n                                }) => {\r\n  const [edit, setEdit] = useState(false)\r\n  if (!profile) return <Preloader/>\r\n\r\n  const onAvatarSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length)\r\n      saveAvatar(e.target.files[0])\r\n  }\r\n\r\n  const onSubmit = (data: ProfileType) => saveProfile(data).then(() => setEdit(false))\r\n\r\n  return (\r\n    <>\r\n      <div className={s.bigImageWrapper}>\r\n        <img src={\r\n          profile.photos.large\r\n          || 'https://cdn2.hubspot.net/hubfs/2221797/cumulus2.jpg'\r\n        } alt='big image'/>\r\n      </div>\r\n      <img src={\r\n        profile.photos.small\r\n        || 'https://data.whicdn.com/images/331901362/original.jpg'\r\n      } className={s.smallImage}/>\r\n      <div className={s.buttonsGroup}>\r\n        {isOwner && <button onClick={() => setEdit(true)} className={s.buttonGroupItem}>Edit</button>}\r\n        {isOwner && <input type='file' onChange={onAvatarSelected} className={s.buttonGroupItem}/>}\r\n      </div>\r\n      {!edit\r\n        ? <ProfileData profile={profile}/>\r\n        : <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n      }\r\n      <ProfileStatus\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n      />\r\n    </>\r\n  )\r\n}\r\nexport default ProfileInfo","import React, { FC } from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PostType = {\r\n  id?: number\r\n  text: string\r\n  likesCount: number\r\n}\r\n\r\nconst Post: FC<PostType> = ({text, likesCount}) => (\r\n  <>\r\n    <div className={s.post}>\r\n      <div className='avatar-wrapper'>\r\n        <img src='https://data.whicdn.com/images/331901362/original.jpg'/>\r\n      </div>\r\n      <p className={s.postText}>{text}</p>\r\n      <div className={s.buttons}>\r\n        <div>like <span>{likesCount}</span></div>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\nexport default Post","import { maxLength, required } from '../../../../utils/validators'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport * as s from '../AddPostForm.module.css'\r\nimport { createField, Textarea } from '../../../common/Forms/Forms'\r\nimport React, { FC } from 'react'\r\nimport * as P from '../../../../types/post'\r\nimport { GetStringKeys } from '../../../../types/types'\r\n\r\nexport const maxLengthPost = maxLength(250)\r\n\r\nconst AddPostForm: FC<InjectedFormProps<P.AddPostFormType>> = ({handleSubmit}) => (\r\n  <form onSubmit={handleSubmit}>\r\n    {createField<GetStringKeys<P.AddPostFormType>>('post', 'Your minds',\r\n      [required, maxLengthPost], Textarea)}\r\n    <button>Submit</button>\r\n  </form>\r\n)\r\n\r\nexport default reduxForm<P.AddPostFormType>({form: 'profilePostForm'})(AddPostForm)","import React, { FC } from 'react'\r\nimport s from './Posts.module.css'\r\nimport Post from './Post/Post'\r\nimport AddPostReduxForm from './AddPostForm/AddPostForm'\r\nimport { AddPostFormType, PostProps } from '../../../types/post'\r\n\r\nconst Posts: FC<PostProps> = props => {\r\n  const onSubmit = (data: AddPostFormType) => props.addPost(data.post)\r\n\r\n  let posts = [...props.posts]\r\n    .map(p => (<Post\r\n        text={p.text}\r\n        likesCount={p.likesCount}\r\n        key={p.id}/>\r\n    ))\r\n    .reverse()\r\n\r\n  return (\r\n    <>\r\n      <AddPostReduxForm onSubmit={onSubmit}/>\r\n      <div className={s.posts}>\r\n        {posts}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default React.memo(Posts)","import { connect } from 'react-redux'\r\nimport Posts from '../components/Profile/Posts/Posts'\r\nimport { profileActions } from '../redux/actions/profile'\r\nimport { AppStateType } from '../redux'\r\nimport * as P from '../types/post'\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({posts: state.profilePage.posts})\r\n\r\nexport default connect<P.PostMapStateToProps, P.PostMapDispatchToProps, {}, AppStateType>\r\n(mapStateToProps, {addPost: profileActions.addPost})(Posts)","import React, { FC } from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport PostsContainer from '../../containers/PostsContainer'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype ProfileProps = {\r\n  isOwner: boolean\r\n  profile: ProfileType | null\r\n  saveAvatar: (file: File) => void\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: FC<ProfileProps> = props => {\r\n  return <>\r\n    <ProfileInfo\r\n      isOwner={props.isOwner}\r\n      profile={props.profile}\r\n      saveAvatar={props.saveAvatar}\r\n      status={props.status}\r\n      updateStatus={props.updateStatus}\r\n      saveProfile={props.saveProfile}\r\n    />\r\n    <PostsContainer/>\r\n  </>\r\n}\r\nexport default Profile","import React, { ComponentType } from 'react'\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { getProfile, getStatus, saveAvatar, updateStatus, saveProfile } from '../redux/reducers/profileReducer'\r\nimport Profile from '../components/Profile/Profile'\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../redux'\r\nimport { ProfileType } from '../types/types'\r\n\r\ntype ProfileMapStateToProps = ReturnType<typeof mapStateToProps>\r\nexport type ProfileMapDispatchToProps = {\r\n  getProfile: (id: number) => void\r\n  getStatus: (id: number) => void\r\n  updateStatus: (status: string) => void\r\n  saveAvatar: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype ProfileTyp = ProfileMapStateToProps & ProfileMapDispatchToProps\r\n\r\ninterface ProfileParamsType {\r\n  id: string\r\n}\r\n\r\ntype PropsType = ProfileTyp & RouteComponentProps<ProfileParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  refreshProfile() {\r\n    let id: number | null = +this.props.match.params.id\r\n    if (!id && this.props.isAuth) id = this.props.userId\r\n    if (!id && !this.props.isAuth) this.props.history.push('/')\r\n    this.props.getProfile(id as number)\r\n    this.props.getStatus(id as number)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.match.params.id !== prevProps.match.params.id)\r\n      this.refreshProfile()\r\n  }\r\n\r\n  render() {\r\n    return <Profile\r\n      {...this.props}\r\n      isOwner={!this.props.match.params.id}\r\n      profile={this.props.profile}\r\n      status={this.props.status}\r\n      updateStatus={this.props.updateStatus}\r\n      saveAvatar={this.props.saveAvatar}\r\n      saveProfile={this.props.saveProfile}\r\n    />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  userId: state.auth.id,\r\n  isAuth: state.auth.isAuth,\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    saveAvatar,\r\n    saveProfile\r\n  }), withRouter)(ProfileContainer)"],"sourceRoot":""}