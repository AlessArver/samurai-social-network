{"version":3,"sources":["components/common/Forms/Forms.tsx","utils/validators.ts","components/common/Forms/forms.module.css","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx"],"names":["Form","input","meta","touched","error","el","props","showError","React","createElement","Textarea","Input","createField","name","placeholder","validators","component","text","validate","required","value","undefined","maxLength","max","length","minLength","min","module","exports","minLengthEmail","minLengthPassword","LoginForm","handleSubmit","captcha","onSubmit","type","src","className","s","formError","LoginReduxForm","reduxForm","form","connect","state","isAuth","auth","login","to","data","email","password","rememberMe"],"mappings":"6PAUMA,EAAyC,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,MAAiD,IAA1CC,KAAOC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,MAAQC,EAAkB,EAAlBA,GAAOC,EAAW,qCAC1FC,EAAYJ,GAAWC,EAE7B,OACE,6BACGI,IAAMC,cAAcJ,EAApB,2BAA4BJ,GAAUK,IACtCC,GAAa,+BAAQH,KAKfM,EAAkC,SAAAJ,GAAK,OAAI,kBAACN,EAAD,iBAAUM,EAAV,CAAiBD,GAAG,eAC/DM,EAA+B,SAAAL,GAAK,OAAI,kBAACN,EAAD,iBAAUM,EAAV,CAAiBD,GAAG,YAE5DO,EAAc,SAA0BC,EACbC,EACAC,EACAC,GAHb,IAIaV,EAJb,uDAIqB,GAAIW,EAJzB,uDAIgC,GAJhC,OAKzB,oCACE,kBAAC,IAAD,eACEJ,KAAMA,EACNC,YAAaA,EACbI,SAAUH,EACVC,UAAWA,GACPV,IANR,IAOMW,K,iCClCR,sGAAO,IAAME,EAA0B,SAAAC,GAAK,OAAIA,OAAQC,EAAY,qBAEvDC,EAAY,SAACC,GAAD,OAAgC,SAACH,GAAD,OACvDA,GAASA,EAAMI,OAASD,EAAxB,0BAAiDA,QAAQF,IAE9CI,EAAY,SAACC,GAAD,OAAgC,SAACN,GAAD,OACvDA,GAASA,EAAMI,OAASE,EAAxB,0BAAiDA,QAAQL,K,oBCP3DM,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,UAAY,2B,yGCOlFC,EAAiBJ,YAAU,GAC3BK,EAAoBL,YAAU,GAmBnBM,EAjByE,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAc5B,EAAhB,EAAgBA,MAAO6B,EAAvB,EAAuBA,QAAvB,OACtF,0BAAMC,SAAUF,GACbpB,YAA2C,QAAS,QAAS,CAACO,IAAUU,GAAiBlB,KACzFC,YAA2C,WAAY,WACtD,CAACO,IAAUW,GAAoBnB,IAAO,CAACwB,KAAM,aAC9CvB,YAA2C,kBAAcS,EAAW,GAAIV,IACvE,CAACwB,KAAM,YAAa,eACrBF,GAAW,yBAAKG,IAAKH,IACrBA,GAAWrB,YAA2C,UAAW,gBAAiB,CAACO,KAAWR,KAC9FP,GACG,yBAAKiC,UAAWC,IAAEC,WAAYnC,IAC9B,yBAAKiC,UAAWC,IAAEC,WAAlB,UAAqCnC,GACzC,6BACE,4BAAQ+B,KAAK,UAAb,a,uBChBAK,EAAiBC,YAAyC,CAACC,KAAM,SAAhDD,CAA0DV,GAyClEY,uBANS,SAACC,GAAD,MAA6C,CACnEC,OAAQD,EAAME,KAAKD,OACnBZ,QAASW,EAAME,KAAKb,WAIkB,CAACc,WAA1BJ,EApB6C,SAAArC,GAI1D,OAAIA,EAAMuC,OAAe,kBAAC,IAAD,CAAUG,GAAG,aAGpC,oCACE,qCACA,kBAACR,EAAD,CAAgBN,SARH,SAACe,GAAD,OACf3C,EAAMyC,MAAME,EAAKC,MAAOD,EAAKE,SAAUF,EAAKG,WAAYH,EAAKhB,UAOvBA,QAAS3B,EAAM2B","file":"static/js/7.2d8e2e67.chunk.js","sourcesContent":["import React, { FC, ReactNode } from 'react'\r\nimport * as s from './forms.module.css'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport cn from 'classnames'\r\nimport { ValidatorType } from '../../../utils/validators'\r\n\r\ntype FormType = {\r\n  el: string\r\n}\r\n\r\nconst Form: FC<WrappedFieldProps & FormType> = ({input, meta: {touched, error}, el, ...props}) => {\r\n  const showError = touched && error\r\n  //  className={cn(s.form, {[s.error]: showError})}\r\n  return (\r\n    <div>\r\n      {React.createElement(el, {...input, ...props})}\r\n      {showError && <small>{error}</small>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = props => <Form {...props} el='textarea'/>\r\nexport const Input: FC<WrappedFieldProps> = props => <Form {...props} el='input'/>\r\n\r\nexport const createField = <KeysType extends string>(name: KeysType,\r\n                                        placeholder: string | undefined,\r\n                                        validators: Array<ValidatorType>,\r\n                                        component: React.FC<WrappedFieldProps>,\r\n                                        props = {}, text = '') =>\r\n  <>\r\n    <Field\r\n      name={name}\r\n      placeholder={placeholder}\r\n      validate={validators}\r\n      component={component}\r\n      {...props}\r\n    /> {text}\r\n  </>","export type ValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: ValidatorType = value => value ? undefined : 'Field is required'\r\n\r\nexport const maxLength = (max: number): ValidatorType => (value) =>\r\n  value && value.length > max ? `Max characters: ${max}` : undefined\r\n\r\nexport const minLength = (min: number): ValidatorType => (value) =>\r\n  value && value.length < min ? `Min characters: ${min}` : undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"forms_form__tHqmU\",\"error\":\"forms_error__2xJFm\",\"formError\":\"forms_formError__3e95j\"};","import React, { FC } from 'react'\r\nimport { createField, Input } from '../../common/Forms/Forms'\r\nimport { minLength, required } from '../../../utils/validators'\r\nimport s from '../../common/Forms/forms.module.css'\r\nimport { InjectedFormProps } from 'redux-form'\r\nimport { LoginFormProps, LoginOwnProps } from '../Login'\r\nimport { GetStringKeys } from '../../../types/types'\r\n\r\nlet minLengthEmail = minLength(3)\r\nlet minLengthPassword = minLength(8)\r\n\r\nconst LoginForm: FC<InjectedFormProps<LoginFormProps, LoginOwnProps> & LoginOwnProps> = ({handleSubmit, error, captcha}) => (\r\n  <form onSubmit={handleSubmit}>\r\n    {createField<GetStringKeys<LoginFormProps>>('email', 'Email', [required, minLengthEmail], Input)}\r\n    {createField<GetStringKeys<LoginFormProps>>('password', 'Password',\r\n      [required, minLengthPassword], Input, {type: 'password'})}\r\n    {createField<GetStringKeys<LoginFormProps>>('rememberMe', undefined, [], Input,\r\n      {type: 'checkbox'}, 'remember me')}\r\n    {captcha && <img src={captcha}/>}\r\n    {captcha && createField<GetStringKeys<LoginFormProps>>('captcha', 'Enter captcha', [required], Input)}\r\n    {error\r\n     && <div className={s.formError}>{error}</div>\r\n     || <div className={s.formError}>ERROR: {error}</div>}\r\n    <div>\r\n      <button type='submit'>Submit</button>\r\n    </div>\r\n  </form>\r\n)\r\nexport default LoginForm","import React, { FC } from 'react'\r\nimport { reduxForm } from 'redux-form'\r\nimport LoginForm from './LoginForm/LoginForm'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../redux/reducers/authReducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../../redux'\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormProps, LoginOwnProps>({form: 'login'})(LoginForm)\r\n\r\nexport type LoginFormProps = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string | null\r\n}\r\n\r\nexport type LoginOwnProps = {\r\n  captcha: string | null\r\n}\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n  captcha: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n  login: (email: string, password: string,rememberMe: boolean, captcha: string | null) => void\r\n}\r\n\r\nconst Login: FC<MapStatePropsType & MapDispatchPropsType> = props => {\r\n  const onSubmit = (data: LoginFormProps) =>\r\n    props.login(data.email, data.password, data.rememberMe, data.captcha)\r\n\r\n  if (props.isAuth) return <Redirect to='/profile'/>\r\n\r\n  return (\r\n    <>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captcha={props.captcha}/>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  captcha: state.auth.captcha\r\n})\r\n\r\n// @ts-ignore\r\nexport default connect(mapStateToProps, {login})(Login)"],"sourceRoot":""}